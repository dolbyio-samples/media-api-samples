{
	"info": {
		"_postman_id": "fe9ae08e-e508-434e-b672-48fb1ef1a5af",
		"name": "Transcode (BETA)",
		"description": "The Dolby.io Media Transcode API transcodes your media to different formats.\n\n[https://docs.dolby.io/media-apis/reference/media-transcode-overview](https://docs.dolby.io/media-apis/reference/media-transcode-overview)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Start Transcoding",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = JSON.parse(responseBody)",
							"pm.environment.set(\"job_id\", data.job_id)",
							"",
							"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"inputs\": [\n        {\n            \"source\": \"{{input-file-link}}\"\n        }\n    ],\n    \"outputs\": [\n        {\n            \"kind\": \"{{file-format}}\",\n            \"destination\": \"{{output-file-link}}\",\n            \"audio\": {\n                \"codec\": \"{{audio-codec}}\"\n            },\n            \"video\": {\n                \"codec\": \"{{video-codec}}\",\n                \"frame_rate\": {{frame-rate}},\n                \"width\": {{video-width}},\n                \"height\": {{video-height}}\n            }\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{dolby-io-url}}/media/transcode",
					"host": [
						"{{dolby-io-url}}"
					],
					"path": [
						"media",
						"transcode"
					]
				},
				"description": "Start transcoding to modify the size, bitrates, and formats for your media.\n\nThe `inputs` location and `outputs` are required to identify the source  \nmaterial and target for results.\n\nThis is an asynchronous operation so you will receive a `job_id` to use in calling `GET /media/transcode` to retrieve the job status.\n\nThere are additional optional parameters that can be provided to further specify the desired output content types."
			},
			"response": []
		},
		{
			"name": "Get Transcode Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(`Running ${request.name}`)",
							"var body = JSON.parse(responseBody);",
							"",
							"if (body.status == \"Running\" || body.status == \"Pending\" ){",
							"  setTimeout(function() {console.log(`Polling status...`)}, 2000);",
							"  postman.setNextRequest(request.name);",
							"} else {",
							"  pm.test(\"Status code = 200\", function () { pm.response.to.have.status(200); });",
							"  pm.test(\"API Status = 200\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(\"Success\");",
							"  });",
							"  console.log(\"Success\")",
							"  ",
							"  postman.setNextRequest(\"Download output\"); ",
							"  /* you can also try postman.setNextRequest(null); */",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{dolby-io-url}}/media/transcode?job_id={{job_id}}",
					"host": [
						"{{dolby-io-url}}"
					],
					"path": [
						"media",
						"transcode"
					],
					"query": [
						{
							"key": "job_id",
							"value": "{{job_id}}"
						}
					]
				},
				"description": "For a given job_id, this method will check if the transcoding task has completed and return transcoding results."
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{x-api-key}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "x-api-key",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "file-format",
			"value": "mp4",
			"type": "string"
		},
		{
			"key": "frame-rate",
			"value": "23.976",
			"type": "string"
		},
		{
			"key": "video-codec",
			"value": "h264",
			"type": "string"
		},
		{
			"key": "audio-codec",
			"value": "aac_lc",
			"type": "string"
		},
		{
			"key": "video-width",
			"value": "1920",
			"type": "string"
		},
		{
			"key": "video-height",
			"value": "1080",
			"type": "string"
		}
	]
}